// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  email    String  @unique
  username String? @unique
  hash     String
  status   Boolean @default(false)
  googleId String? @unique

  roleId             Int
  role               Role               @relation(fields: [roleId], references: [id], onDelete: Cascade)
  profile            Profile?
  taughtCourses      CourseTeacher[]    @relation("teachingAssignments")
  studentEnrollments CourseEnrollment[] @relation("studentEnrollments")

  @@map("users")
}

model Role {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  name        String @unique
  permissions Json?
  user        User[]

  @@map("role")
}

model Profile {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  identity      String?
  avatar        String?
  fullname      String?
  dob           DateTime?
  gender        String?
  phone         String?
  city          String?
  state         String?
  country       String?
  address       String?
  zip           String?
  bio           String?
  sign          String?
  teamsId       String?   @unique
  averageRating Float?    @default(4.0)

  availibility   Json?
  marital_status String?
  language       String?
  education      String?
  certificate      String?
  experience      String?
  proficencyLevel      String?
  teachingMethod      String?

  receivedRatings Rating[] @relation("ReceivedRatings")
  givenRatings    Rating[] @relation("GivenRatings")
  userId          Int      @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profile")
}

model Rating {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  score   Int // for example 1 to 5
  comment String?

  // The user/profile who is receiving the rating
  profileId Int
  profile   Profile @relation("ReceivedRatings", fields: [profileId], references: [id], onDelete: Cascade)

  // The user/profile who is giving the rating
  ratedById Int
  ratedBy   Profile @relation("GivenRatings", fields: [ratedById], references: [id], onDelete: Cascade)
}

model Course {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  title String @unique
  slug  String @unique
  desc  String
  image String

  teachers    CourseTeacher[]
  enrollments CourseEnrollment[]

  @@map("courses")
}

model Session {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  startDate   DateTime
  endDate     DateTime
  meetingUrl  String? // Optional MS Teams meeting link
  isCompleted Boolean  @default(false)

  // Relations
  materials    Material[] // One-to-many relationship
  enrollment   CourseEnrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  enrollmentId Int

  @@map("sessions")
}

model Material {
  id        Int     @id @default(autoincrement())
  session   Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId Int

  fileUrl    String // The actual URL
  fileName   String // E.g., "lesson-1.pdf"
  fileSize   Int // In bytes
  uploadedAt DateTime @default(now())
  fileType   String // Optional: e.g., "pdf", "image", etc.

  @@map("materials")
}

model CourseTeacher {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now()) @map("created_at")
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  teacherId Int @map("teacher_id")
  courseId  Int @map("course_id")

  teacher     User               @relation("teachingAssignments", fields: [teacherId], references: [id], onDelete: Cascade)
  course      Course             @relation(fields: [courseId], references: [id])
  enrollments CourseEnrollment[] @relation("teacherEnrollments")
  sessionId   Int?

  @@unique([teacherId, courseId])
  @@map("course_teachers")
}

model CourseEnrollment {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now()) @map("created_at")
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  studentId Int @map("student_id")
  courseId  Int @map("course_id")
  teacherId Int @map("teacher_id")

  // Relations
  student   User          @relation("studentEnrollments", fields: [studentId], references: [id], onDelete: Cascade)
  course    Course        @relation(fields: [courseId], references: [id])
  teacher   CourseTeacher @relation("teacherEnrollments", fields: [teacherId], references: [id], onDelete: Cascade)
  sessions  Session[]
  sessionId Int?

  @@unique([studentId, courseId])
  @@index([teacherId, courseId])
  @@map("course_enrollments")
}

model StudentLeads {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now()) @map("created_at")
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  fullName        String
  country         String
  email           String  @unique
  teamId          String  @unique
  phoneNumber     String
  residenceNumber String
  purpose         String
  preferedTime    String
  status          Boolean @default(true)

  @@map("student_leads")
}
