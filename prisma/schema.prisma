// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  email    String  @unique
  username String? @unique
  hash     String
  status   Boolean @default(false)
  googleId String? @unique

  roleId             Int
  role               Role               @relation(fields: [roleId], references: [id], onDelete: Cascade)
  profile            Profile?
  taughtCourses      CourseTeacher[]    @relation("teachingAssignments")
  studentEnrollments CourseEnrollment[] @relation("studentEnrollments")

  @@map("users")
}

model Role {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  name        String @unique
  permissions Json?
  user        User[]

  @@map("role")
}

model Profile {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  avatar    String?
  firstName String
  lastName  String
  dob       DateTime?
  gender    String?
  phone     String?
  city      String?
  state     String?
  country   String?
  address   String?
  zip       String?
  bio       String?
  sign      String?

  marital_status String?
  language       String?
  education      String?

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profile")
}

model Course {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  
  title     String    @unique
  slug      String    @unique
  desc      String
  image     String

  teachers    CourseTeacher[]
  enrollments CourseEnrollment[]

  @@map("courses")
}

model CourseTeacher {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now()) @map("created_at")
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  teacherId  Int       @map("teacher_id")
  courseId   Int       @map("course_id")

  teacher     User               @relation("teachingAssignments", fields: [teacherId], references: [id], onDelete: Cascade)
  course      Course             @relation(fields: [courseId], references: [id])
  enrollments CourseEnrollment[] @relation("teacherEnrollments")

  @@unique([teacherId, courseId])
  @@map("course_teachers")
}

model CourseEnrollment {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now()) @map("created_at")
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  studentId  Int       @map("student_id")
  courseId   Int       @map("course_id")
  teacherId  Int       @map("teacher_id")

  // Relations
  student User          @relation("studentEnrollments", fields: [studentId], references: [id], onDelete: Cascade)
  course  Course        @relation(fields: [courseId], references: [id])
  teacher CourseTeacher @relation("teacherEnrollments", fields: [teacherId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId])
  @@index([teacherId, courseId])
  @@map("course_enrollments")
}
